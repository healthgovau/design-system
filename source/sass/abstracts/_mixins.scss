// When called via @include name(), the mixin will render CSS selectors

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$opacity-ie+")";
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin rgba-background($color, $opacity: 1) {
  background-color: rgba($color, $opacity);
}

// TODO
// flexbox layout generation with grid failover
// separate card from layout so that the dom might be class="health-card health-flex-thirds col-xs-4"


// Thank you NSW Design System
@mixin pseudo-clickable-block {
  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    // z-index: map-get($z-index, low);
  }
}

// generates modifer classes in the bem syntax
@mixin helper-classes($attribute, $map) {

  @each $modifier,
  $value in $map {
    &--#{$modifier} {
      #{$attribute}: get-mapped-value($modifier, $map) !important;
    }
  }
}

// When called via @include name(), the mixin will render CSS selectors
// Must be applied to :before or :after pseudo-elements

// The "chevron" mixin is based on the CSS for the chevron of the HDS "figure".
// @see https://designsystem.health.gov.au/components/detail/figure.html .
@mixin chevron($left-or-right-side: "right", $direction: "up", $colour: $AU-color-foreground-text) {

  &:after {
    content: '';
    position: absolute;
    top: 50%;
    @include AU-space($left-or-right-side, 1unit);
    @include AU-space(margin-top, -0.4unit);
    @include AU-space(width, 0.8unit);
    @include AU-space(height, 0.8unit);
    background-color: $colour;
    mask-image: AU-svguri('<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-right" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128"><path d="M64 0l64 64-16 16-64-64"/><path d="M64 0l16 16-64 64L0 64"/></svg>');
    -webkit-mask-image: AU-svguri('<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-right" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128"><path d="M64 0l64 64-16 16-64-64"/><path d="M64 0l16 16-64 64L0 64"/></svg>');
    z-index: 101;

    @if $direction=="right" {
      transform: rotate(90deg);
    }

    @else if $direction=="left" {
      transform: rotate(-90deg);
    }

    @else if $direction=="down" {
      transform: rotate(180deg);
    }
  }

}

// @mixin chevron-down($left-or-right-side, $colour: $AU-color-foreground-text) {
//   @include chevron($left-or-right-side, $colour);

// }

// @mixin chevron-right($left-or-right-side, $colour: $AU-color-foreground-text) {
//   @include chevron($left-or-right-side, $colour);
//   @include AU-space($left-or-right-side, 1.25unit);
//   transform: rotate(90deg);
// }

// @mixin chevron-left($left-or-right-side, $colour: $AU-color-foreground-text) {
//   @include chevron($left-or-right-side, $colour);
//   @include AU-space($left-or-right-side, 1.25unit);
//   transform: rotate(-90deg);
// }

/// Generate coloured background.
/// Supports single colour and bicolour gradient backgrounds.
/// @param {string} $colour_a - A colour value (e.g. white, #ffffff, rgb(255, 255, 255)).
/// @param {string} $colour_b - A colour value (e.g. black, #000, rgb(0, 0, 0)).
/// @param {string} $angle - Gradient angle expressed either in degrees (e.g. 105deg) or as texts (e.g. to right, to bottom).
@mixin background-style($colour_a: null, $colour_b: null, $angle: to right) {
  @if $colour_a and $colour_b {
    background-color: $colour_a;
    background: linear-gradient($angle, $colour_a, $colour_b);
  }

  @else if $colour_a {
    background: $colour_a;
  }

  @else {
    @error "Something went wrong with the background-style mixin. Check the mixin arguments and try again.";
  }
}

@mixin border-radius($radius: $border-radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
}

@mixin box-shadow($colour: $colour-shadow) {
  box-shadow: 0px 0.125em 0.375em $colour;
}

@function health-grid-item-width($items-per-row: 1, $gutter-width: 0rem) {
  $value: calc((100% / #{$items-per-row}) - ((#{$items-per-row - 1} * #{$gutter-width}))/#{$items-per-row});
  @return $value;
}