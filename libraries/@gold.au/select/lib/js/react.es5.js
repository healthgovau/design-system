"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.AUselectItem=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");var _excluded=["text","value"],_excluded2=["dark","options","block","status","className"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * An item inside the Select component
 *
 * @param  {string}   text             - The text of this option
 * @param  {string}   value            - The value of this option
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUselectItem=function AUselectItem(_ref){var text=_ref.text,value=_ref.value,attributeOptions=_objectWithoutProperties(_ref,_excluded);return/*#__PURE__*/_react["default"].createElement("option",_extends({value:value},attributeOptions),text)};exports.AUselectItem=AUselectItem;AUselectItem.propTypes={text:_propTypes["default"].string.isRequired,value:_propTypes["default"].string.isRequired,className:_propTypes["default"].string};/**
 * DEFAULT
 * The select component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {array}   options          - The options for the select, format: { value: '', text: '' }
 * @param  {string}  block            - The block option
 * @param  {string}  status           - Mark this field as either 'valid' or 'invalid', optional
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUselect=function AUselect(_ref2){var dark=_ref2.dark,options=_ref2.options,block=_ref2.block,status=_ref2.status,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,_excluded2);return/*#__PURE__*/_react["default"].createElement("select",_extends({className:"au-select ".concat(className)+"".concat(block?" au-select--block":"")+"".concat(dark?" au-select--dark":"")+"".concat(status==="valid"?" au-select--valid":"")+"".concat(status==="invalid"?" au-select--invalid":"")},attributeOptions),options.map(function(option,i){return/*#__PURE__*/_react["default"].createElement(AUselectItem,_extends({key:i},option))}))};AUselect.propTypes={dark:_propTypes["default"].bool,options:_propTypes["default"].arrayOf(_propTypes["default"].shape({value:_propTypes["default"].string.isRequired,text:_propTypes["default"].string.isRequired})).isRequired,block:_propTypes["default"].bool,status:_propTypes["default"].oneOf(["valid","invalid"]),className:_propTypes["default"].string};var _default=AUselect;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVXNlbGVjdEl0ZW0iLCJ0ZXh0IiwidmFsdWUiLCJhdHRyaWJ1dGVPcHRpb25zIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImNsYXNzTmFtZSIsIkFVc2VsZWN0IiwiZGFyayIsIm9wdGlvbnMiLCJibG9jayIsInN0YXR1cyIsIm1hcCIsIm9wdGlvbiIsImkiLCJib29sIiwiYXJyYXlPZiIsInNoYXBlIiwib25lT2YiXSwibWFwcGluZ3MiOiJxSEFTQSxvREFDQSw2REFNQSw2Qixzb0NBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNQSxDQUFBQSxZQUFZLENBQUcsUUFBZkEsQ0FBQUEsWUFBZSxVQUFHQyxDQUFBQSxJQUFILE1BQUdBLElBQUgsQ0FBU0MsS0FBVCxNQUFTQSxLQUFULENBQW1CQyxnQkFBbkIsNkRBQzNCLG1EQUFRLEtBQUssQ0FBR0QsS0FBaEIsRUFBNkJDLGdCQUE3QixFQUFrREYsSUFBbEQsQ0FEMkIsQ0FBckIsQyxrQ0FJUEQsWUFBWSxDQUFDSSxTQUFiLENBQXlCLENBQ3hCSCxJQUFJLENBQUVJLHNCQUFVQyxNQUFWLENBQWlCQyxVQURDLENBRXhCTCxLQUFLLENBQUVHLHNCQUFVQyxNQUFWLENBQWlCQyxVQUZBLENBR3hCQyxTQUFTLENBQUVILHNCQUFVQyxNQUhHLENBQXpCLENBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEdBQU1HLENBQUFBLFFBQVEsQ0FBRyxRQUFYQSxDQUFBQSxRQUFXLE9BQTJFLElBQXhFQyxDQUFBQSxJQUF3RSxPQUF4RUEsSUFBd0UsQ0FBbEVDLE9BQWtFLE9BQWxFQSxPQUFrRSxDQUF6REMsS0FBeUQsT0FBekRBLEtBQXlELENBQWxEQyxNQUFrRCxPQUFsREEsTUFBa0QsdUJBQTFDTCxTQUEwQyxDQUExQ0EsU0FBMEMsMEJBQTlCLEVBQThCLGlCQUF2QkwsZ0JBQXVCLDRDQUUzRixtQkFDQyxtREFBUSxTQUFTLENBQ2hCLG9CQUFjSyxTQUFkLFlBQ0lJLEtBQUssdUJBRFQsWUFFSUYsSUFBSSxDQUFHLGtCQUFILENBQXdCLEVBRmhDLFlBR0lHLE1BQU0sR0FBSyxPQUFYLENBQXFCLG1CQUFyQixDQUEyQyxFQUgvQyxZQUlJQSxNQUFNLEdBQUssU0FBWCxDQUF1QixxQkFBdkIsQ0FBK0MsRUFKbkQsQ0FERCxFQU1PVixnQkFOUCxFQVFFUSxPQUFPLENBQUNHLEdBQVIsQ0FDQyxTQUFFQyxNQUFGLENBQVVDLENBQVYscUJBQWlCLGdDQUFDLFlBQUQsV0FBYyxHQUFHLENBQUdBLENBQXBCLEVBQTZCRCxNQUE3QixFQUFqQixDQURELENBUkYsQ0FjRCxDQWpCRCxDQW1CQU4sUUFBUSxDQUFDTCxTQUFULENBQXFCLENBQ3BCTSxJQUFJLENBQUVMLHNCQUFVWSxJQURJLENBRXBCTixPQUFPLENBQUVOLHNCQUFVYSxPQUFWLENBQ1JiLHNCQUFVYyxLQUFWLENBQWdCLENBQ2ZqQixLQUFLLENBQUVHLHNCQUFVQyxNQUFWLENBQWlCQyxVQURULENBRWZOLElBQUksQ0FBRUksc0JBQVVDLE1BQVYsQ0FBaUJDLFVBRlIsQ0FBaEIsQ0FEUSxFQUtQQSxVQVBrQixDQVFwQkssS0FBSyxDQUFFUCxzQkFBVVksSUFSRyxDQVNwQkosTUFBTSxDQUFFUixzQkFBVWUsS0FBVixDQUFnQixDQUFFLE9BQUYsQ0FBVyxTQUFYLENBQWhCLENBVFksQ0FVcEJaLFNBQVMsQ0FBRUgsc0JBQVVDLE1BVkQsQ0FBckIsQyxhQWFlRyxRIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEBnb2xkLmF1L3NlbGVjdCB2My4wLjAgKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXG4gKiBzZWxlY3QgZnVuY3Rpb25cbiAqXG4gKiBUaGUgZm9ybSBzZWxlY3QgZWxlbWVudCBmb3IgbXVsdGlwbGUgb3B0aW9uc1xuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG5cbi8qKlxuICogQW4gaXRlbSBpbnNpZGUgdGhlIFNlbGVjdCBjb21wb25lbnRcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgdGV4dCAgICAgICAgICAgICAtIFRoZSB0ZXh0IG9mIHRoaXMgb3B0aW9uXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgdmFsdWUgICAgICAgICAgICAtIFRoZSB2YWx1ZSBvZiB0aGlzIG9wdGlvblxuICogQHBhcmFtICB7b2JqZWN0fSAgIGF0dHJpYnV0ZU9wdGlvbnMgLSBBbnkgb3RoZXIgYXR0cmlidXRlIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IEFVc2VsZWN0SXRlbSA9ICh7IHRleHQsIHZhbHVlLCAuLi5hdHRyaWJ1dGVPcHRpb25zIH0pID0+IChcblx0PG9wdGlvbiB2YWx1ZT17IHZhbHVlIH0geyAuLi5hdHRyaWJ1dGVPcHRpb25zIH0+eyB0ZXh0IH08L29wdGlvbj5cbik7XG5cbkFVc2VsZWN0SXRlbS5wcm9wVHlwZXMgPSB7XG5cdHRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0dmFsdWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0Y2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuXG4vKipcbiAqIERFRkFVTFRcbiAqIFRoZSBzZWxlY3QgY29tcG9uZW50XG4gKlxuICogQHBhcmFtICB7Ym9vbGVhbn0gZGFyayAgICAgICAgICAgICAtIEFkZCB0aGUgZGFyayB2YXJpYXRpb24gY2xhc3MsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHthcnJheX0gICBvcHRpb25zICAgICAgICAgIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBzZWxlY3QsIGZvcm1hdDogeyB2YWx1ZTogJycsIHRleHQ6ICcnIH1cbiAqIEBwYXJhbSAge3N0cmluZ30gIGJsb2NrICAgICAgICAgICAgLSBUaGUgYmxvY2sgb3B0aW9uXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdGF0dXMgICAgICAgICAgIC0gTWFyayB0aGlzIGZpZWxkIGFzIGVpdGhlciAndmFsaWQnIG9yICdpbnZhbGlkJywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge3N0cmluZ30gIGNsYXNzTmFtZSAgICAgICAgLSBBbiBhZGRpdGlvbmFsIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7b2JqZWN0fSAgYXR0cmlidXRlT3B0aW9ucyAtIEFueSBvdGhlciBhdHRyaWJ1dGUgb3B0aW9uc1xuICovXG5jb25zdCBBVXNlbGVjdCA9ICh7IGRhcmssIG9wdGlvbnMsIGJsb2NrLCBzdGF0dXMsIGNsYXNzTmFtZSA9ICcnLCAuLi5hdHRyaWJ1dGVPcHRpb25zIH0pID0+IHtcblxuXHRyZXR1cm4gKFxuXHRcdDxzZWxlY3QgY2xhc3NOYW1lPXtcblx0XHRcdGBhdS1zZWxlY3QgJHsgY2xhc3NOYW1lIH1gICtcblx0XHRcdGAkeyBibG9jayA/IGAgYXUtc2VsZWN0LS1ibG9ja2AgOiBgYCB9YCArXG5cdFx0XHRgJHsgZGFyayA/ICcgYXUtc2VsZWN0LS1kYXJrJyA6ICcnIH1gICtcblx0XHRcdGAkeyBzdGF0dXMgPT09ICd2YWxpZCcgPyAnIGF1LXNlbGVjdC0tdmFsaWQnIDogJycgfWAgK1xuXHRcdFx0YCR7IHN0YXR1cyA9PT0gJ2ludmFsaWQnID8gJyBhdS1zZWxlY3QtLWludmFsaWQnIDogJycgfWBcblx0XHR9IHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9PlxuXHRcdFx0e1xuXHRcdFx0XHRvcHRpb25zLm1hcChcblx0XHRcdFx0XHQoIG9wdGlvbiwgaSApID0+IDxBVXNlbGVjdEl0ZW0ga2V5PXsgaSB9IHsgLi4ub3B0aW9uIH0gLz5cblx0XHRcdFx0KVxuXHRcdFx0fVxuXHRcdDwvc2VsZWN0PlxuXHQpO1xufTtcblxuQVVzZWxlY3QucHJvcFR5cGVzID0ge1xuXHRkYXJrOiBQcm9wVHlwZXMuYm9vbCxcblx0b3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdFx0XHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdFx0fSlcblx0KS5pc1JlcXVpcmVkLFxuXHRibG9jazogUHJvcFR5cGVzLmJvb2wsXG5cdHN0YXR1czogUHJvcFR5cGVzLm9uZU9mKFsgJ3ZhbGlkJywgJ2ludmFsaWQnIF0pLFxuXHRjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBVXNlbGVjdDtcbiJdfQ==