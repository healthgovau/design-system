"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");var _excluded=["linkComponent","link","children","as","dark","type","block","className"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * All different kind of button options
 *
 * @type {Object}
 */var options={"primary":"","secondary":"au-btn--secondary","tertiary":"au-btn--tertiary"};/**
 * DEFAULT
 * The primary button
 *
 * @param  {string}   linkComponent    - The component used for the link
 * @param  {string}   link             - If this is a link the location it goes
 * @param  {string}   children         - Anything inside
 * @param  {string}   as               - The kind of button, can be either 'primary', 'secondary', 'tertiary', default: 'primary'
 * @param  {boolean}  dark             - Add the dark variation class, optional
 * @param  {string}   type             - The type attribute, default: 'button', optional
 * @param  {boolean}  block            - The block option, optional
 * @param  {string}   className        - An additional class, optional
 * @param  {object}   attributeOptions - Any other attribute options
 */var AUbutton=function AUbutton(_ref){var linkComponent=_ref.linkComponent,link=_ref.link,children=_ref.children,as=_ref.as,dark=_ref.dark,type=_ref.type,block=_ref.block,_ref$className=_ref.className,className=_ref$className===void 0?"":_ref$className,attributeOptions=_objectWithoutProperties(_ref,_excluded);if(link){var LinkComponent=linkComponent;// If we are using a normal link
if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}return/*#__PURE__*/_react["default"].createElement(LinkComponent,_extends({className:"au-btn ".concat(className," ").concat(options[as]).concat(block?" au-btn--block":"").concat(dark?" au-btn--dark":"")},attributeOptions),children)}else{return/*#__PURE__*/_react["default"].createElement("button",_extends({type:type,className:"au-btn ".concat(className," ").concat(options[as]).concat(block?" au-btn--block":"").concat(dark?" au-btn--dark":"")},attributeOptions),children)}};AUbutton.propTypes={link:_propTypes["default"].string,children:_propTypes["default"].node.isRequired,as:_propTypes["default"].oneOf(["primary","secondary","tertiary"]).isRequired,dark:_propTypes["default"].bool,type:_propTypes["default"].string,block:_propTypes["default"].bool,className:_propTypes["default"].string,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUbutton.defaultProps={type:"button",as:"primary",linkComponent:"a"};var _default=AUbutton;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJvcHRpb25zIiwiQVVidXR0b24iLCJsaW5rQ29tcG9uZW50IiwibGluayIsImNoaWxkcmVuIiwiYXMiLCJkYXJrIiwidHlwZSIsImJsb2NrIiwiY2xhc3NOYW1lIiwiYXR0cmlidXRlT3B0aW9ucyIsIkxpbmtDb21wb25lbnQiLCJocmVmIiwidG8iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJub2RlIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJnR0FTQSxvREFDQSw2REFNQSw2Qixxb0NBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEdBQU1BLENBQUFBLE9BQU8sQ0FBRyxDQUNmLFVBQVcsRUFESSxDQUVmLFlBQWEsbUJBRkUsQ0FHZixXQUFZLGtCQUhHLENBQWhCLENBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEdBQU1DLENBQUFBLFFBQVEsQ0FBRyxRQUFYQSxDQUFBQSxRQUFXLE1BQW1HLElBQWhHQyxDQUFBQSxhQUFnRyxNQUFoR0EsYUFBZ0csQ0FBakZDLElBQWlGLE1BQWpGQSxJQUFpRixDQUEzRUMsUUFBMkUsTUFBM0VBLFFBQTJFLENBQWpFQyxFQUFpRSxNQUFqRUEsRUFBaUUsQ0FBN0RDLElBQTZELE1BQTdEQSxJQUE2RCxDQUF2REMsSUFBdUQsTUFBdkRBLElBQXVELENBQWpEQyxLQUFpRCxNQUFqREEsS0FBaUQscUJBQTFDQyxTQUEwQyxDQUExQ0EsU0FBMEMseUJBQTlCLEVBQThCLGdCQUF2QkMsZ0JBQXVCLDBDQUNuSCxHQUFJUCxJQUFKLENBQVcsQ0FDVixHQUFNUSxDQUFBQSxhQUFhLENBQUdULGFBQXRCLENBRUE7QUFDQSxHQUFJUyxhQUFhLEdBQUssR0FBdEIsQ0FBNEIsQ0FDM0JELGdCQUFnQixDQUFDRSxJQUFqQixDQUF3QlQsSUFDeEIsQ0FDRDtBQUhBLElBSUssSUFBSSxNQUFPUSxDQUFBQSxhQUFQLEdBQXlCLFVBQTdCLENBQTBDLENBQzlDRCxnQkFBZ0IsQ0FBQ0csRUFBakIsQ0FBc0JWLElBQ3RCLENBRUQsbUJBQ0MsZ0NBQUMsYUFBRCxXQUNDLFNBQVMsa0JBQWNNLFNBQWQsYUFBNkJULE9BQU8sQ0FBRUssRUFBRixDQUFwQyxTQUErQ0csS0FBSyxDQUFHLGdCQUFILENBQXNCLEVBQTFFLFNBQWlGRixJQUFJLENBQUcsZUFBSCxDQUFxQixFQUExRyxDQURWLEVBRU1JLGdCQUZOLEVBSUdOLFFBSkgsQ0FPRCxDQXBCRCxJQXFCSyxDQUNKLG1CQUNDLG1EQUNDLElBQUksQ0FBR0csSUFEUixDQUVDLFNBQVMsa0JBQWNFLFNBQWQsYUFBNkJULE9BQU8sQ0FBRUssRUFBRixDQUFwQyxTQUErQ0csS0FBSyxDQUFHLGdCQUFILENBQXNCLEVBQTFFLFNBQWlGRixJQUFJLENBQUcsZUFBSCxDQUFxQixFQUExRyxDQUZWLEVBR01JLGdCQUhOLEVBS0dOLFFBTEgsQ0FRRCxDQUNELENBakNELENBbUNBSCxRQUFRLENBQUNhLFNBQVQsQ0FBcUIsQ0FDcEJYLElBQUksQ0FBRVksc0JBQVVDLE1BREksQ0FFcEJaLFFBQVEsQ0FBRVcsc0JBQVVFLElBQVYsQ0FBZUMsVUFGTCxDQUdwQmIsRUFBRSxDQUFFVSxzQkFBVUksS0FBVixDQUFnQixDQUFFLFNBQUYsQ0FBYSxXQUFiLENBQTBCLFVBQTFCLENBQWhCLEVBQXdERCxVQUh4QyxDQUlwQlosSUFBSSxDQUFFUyxzQkFBVUssSUFKSSxDQUtwQmIsSUFBSSxDQUFFUSxzQkFBVUMsTUFMSSxDQU1wQlIsS0FBSyxDQUFFTyxzQkFBVUssSUFORyxDQU9wQlgsU0FBUyxDQUFFTSxzQkFBVUMsTUFQRCxDQVFwQmQsYUFBYSxDQUFFYSxzQkFBVU0sU0FBVixDQUFvQixDQUFFTixzQkFBVUMsTUFBWixDQUFvQkQsc0JBQVVPLElBQTlCLENBQXBCLENBUkssQ0FBckIsQ0FXQXJCLFFBQVEsQ0FBQ3NCLFlBQVQsQ0FBd0IsQ0FDdkJoQixJQUFJLENBQUUsUUFEaUIsQ0FFdkJGLEVBQUUsQ0FBRSxTQUZtQixDQUd2QkgsYUFBYSxDQUFFLEdBSFEsQ0FBeEIsQyxhQU1lRCxRIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEBnb2xkLmF1L2J1dHRvbnMgdjQuMC4wICovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogYnV0dG9ucyBmdW5jdGlvblxuICpcbiAqIEJ1dHRvbnMgc2lnbmFsIGFjdGlvbi4gVXNlIHRoZW0gdG8gbW92ZSB0aGUgdXNlciB0aHJvdWdoIHRoZSBzZXJ2aWNlLlxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG5cbi8qKlxuICogQWxsIGRpZmZlcmVudCBraW5kIG9mIGJ1dHRvbiBvcHRpb25zXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3Qgb3B0aW9ucyA9IHtcblx0J3ByaW1hcnknOiAnJyxcblx0J3NlY29uZGFyeSc6ICdhdS1idG4tLXNlY29uZGFyeScsXG5cdCd0ZXJ0aWFyeSc6ICdhdS1idG4tLXRlcnRpYXJ5Jyxcbn07XG5cblxuLyoqXG4gKiBERUZBVUxUXG4gKiBUaGUgcHJpbWFyeSBidXR0b25cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgbGlua0NvbXBvbmVudCAgICAtIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGxpbmtcbiAqIEBwYXJhbSAge3N0cmluZ30gICBsaW5rICAgICAgICAgICAgIC0gSWYgdGhpcyBpcyBhIGxpbmsgdGhlIGxvY2F0aW9uIGl0IGdvZXNcbiAqIEBwYXJhbSAge3N0cmluZ30gICBjaGlsZHJlbiAgICAgICAgIC0gQW55dGhpbmcgaW5zaWRlXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgYXMgICAgICAgICAgICAgICAtIFRoZSBraW5kIG9mIGJ1dHRvbiwgY2FuIGJlIGVpdGhlciAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndGVydGlhcnknLCBkZWZhdWx0OiAncHJpbWFyeSdcbiAqIEBwYXJhbSAge2Jvb2xlYW59ICBkYXJrICAgICAgICAgICAgIC0gQWRkIHRoZSBkYXJrIHZhcmlhdGlvbiBjbGFzcywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge3N0cmluZ30gICB0eXBlICAgICAgICAgICAgIC0gVGhlIHR5cGUgYXR0cmlidXRlLCBkZWZhdWx0OiAnYnV0dG9uJywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge2Jvb2xlYW59ICBibG9jayAgICAgICAgICAgIC0gVGhlIGJsb2NrIG9wdGlvbiwgb3B0aW9uYWxcbiAqIEBwYXJhbSAge3N0cmluZ30gICBjbGFzc05hbWUgICAgICAgIC0gQW4gYWRkaXRpb25hbCBjbGFzcywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge29iamVjdH0gICBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zXG4gKi9cbmNvbnN0IEFVYnV0dG9uID0gKHsgbGlua0NvbXBvbmVudCwgbGluaywgY2hpbGRyZW4sIGFzLCBkYXJrLCB0eXBlLCBibG9jaywgY2xhc3NOYW1lID0gJycsIC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSkgPT4ge1xuXHRpZiggbGluayApIHtcblx0XHRjb25zdCBMaW5rQ29tcG9uZW50ID0gbGlua0NvbXBvbmVudDtcblxuXHRcdC8vIElmIHdlIGFyZSB1c2luZyBhIG5vcm1hbCBsaW5rXG5cdFx0aWYoIExpbmtDb21wb25lbnQgPT09ICdhJyApIHtcblx0XHRcdGF0dHJpYnV0ZU9wdGlvbnMuaHJlZiA9IGxpbms7XG5cdFx0fVxuXHRcdC8vIElmIHdlIGFyZSB1c2luZyBhIGxpbmsgY29tcG9uZW50XG5cdFx0ZWxzZSBpZiggdHlwZW9mIExpbmtDb21wb25lbnQgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRhdHRyaWJ1dGVPcHRpb25zLnRvID0gbGluaztcblx0XHR9XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PExpbmtDb21wb25lbnRcblx0XHRcdFx0Y2xhc3NOYW1lPXsgYGF1LWJ0biAkeyBjbGFzc05hbWUgfSAkeyBvcHRpb25zWyBhcyBdIH0keyBibG9jayA/ICcgYXUtYnRuLS1ibG9jaycgOiAnJyB9JHsgZGFyayA/ICcgYXUtYnRuLS1kYXJrJyA6ICcnIH1gIH1cblx0XHRcdFx0eyAuLi5hdHRyaWJ1dGVPcHRpb25zIH1cblx0XHRcdD5cblx0XHRcdFx0eyBjaGlsZHJlbiB9XG5cdFx0XHQ8L0xpbmtDb21wb25lbnQ+XG5cdFx0KTtcblx0fVxuXHRlbHNlIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGJ1dHRvblxuXHRcdFx0XHR0eXBlPXsgdHlwZSB9XG5cdFx0XHRcdGNsYXNzTmFtZT17IGBhdS1idG4gJHsgY2xhc3NOYW1lIH0gJHsgb3B0aW9uc1sgYXMgXSB9JHsgYmxvY2sgPyAnIGF1LWJ0bi0tYmxvY2snIDogJycgfSR7IGRhcmsgPyAnIGF1LWJ0bi0tZGFyaycgOiAnJyB9YCB9XG5cdFx0XHRcdHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9XG5cdFx0XHQ+XG5cdFx0XHRcdHsgY2hpbGRyZW4gfVxuXHRcdFx0PC9idXR0b24+XG5cdFx0KTtcblx0fVxufTtcblxuQVVidXR0b24ucHJvcFR5cGVzID0ge1xuXHRsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblx0YXM6IFByb3BUeXBlcy5vbmVPZihbICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXJ0aWFyeScgXSkuaXNSZXF1aXJlZCxcblx0ZGFyazogUHJvcFR5cGVzLmJvb2wsXG5cdHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGJsb2NrOiBQcm9wVHlwZXMuYm9vbCxcblx0Y2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRsaW5rQ29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFsgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMgXSksXG59O1xuXG5BVWJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG5cdHR5cGU6ICdidXR0b24nLFxuXHRhczogJ3ByaW1hcnknLFxuXHRsaW5rQ29tcG9uZW50OiAnYScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBVWJ1dHRvbjtcbiJdfQ==