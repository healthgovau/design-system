"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.AUlinkListItem=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));require("../css/styles.css");var _excluded=["text","link","linkComponent","li","children","onClick"],_excluded2=["inline","items","linkComponent","className"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * An item inside the AUlinkList component
 *
 * @param  {node}   text             - The link Text or link html
 * @param  {string} link             - The link URL, optional
 * @param  {string} linkComponent    - The component used for the link
 * @param  {object} li               - An additional object to be spread into the wrapping element, optional
 * @param  {object} onClick          - The onClick event handler
 * @param  {object} attributeOptions - Any other attribute options, optional
 */var AUlinkListItem=function AUlinkListItem(_ref){var text=_ref.text,link=_ref.link,linkComponent=_ref.linkComponent,_ref$li=_ref.li,li=_ref$li===void 0?{}:_ref$li,children=_ref.children,onClick=_ref.onClick,attributeOptions=_objectWithoutProperties(_ref,_excluded);var LinkComponent=linkComponent;// If there is no link provided and an onClick function
if(typeof onClick==="function"){attributeOptions.onClick=onClick;// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)
if(!link){link="#"}}// If we are using a normal link
if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}if(link){return/*#__PURE__*/_react["default"].createElement("li",li,/*#__PURE__*/_react["default"].createElement(LinkComponent,attributeOptions,text),children)}return/*#__PURE__*/_react["default"].createElement("li",li,text,children)};exports.AUlinkListItem=AUlinkListItem;AUlinkListItem.propTypes={text:_propTypes["default"].node.isRequired,link:_propTypes["default"].string,li:_propTypes["default"].object,onClick:_propTypes["default"].func,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUlinkListItem.defaultProps={linkComponent:"a"};/**
 * DEFAULT
 * The Link List component
 *
 * @param  {array}   items            - All items inside the link list to be passed to AUlinkListItem, format: { link: '', text: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {string}  linkComponent    - The component used for the link
 * @param  {object}  attributeOptions - Any other attribute options, optional
 */var AUlinkList=function AUlinkList(_ref2){var inline=_ref2.inline,items=_ref2.items,linkComponent=_ref2.linkComponent,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,_excluded2);return/*#__PURE__*/_react["default"].createElement("ul",_extends({className:"au-link-list ".concat(className).concat(inline?" au-link-list--inline":"")},attributeOptions),items.map(function(item,i){return/*#__PURE__*/_react["default"].createElement(AUlinkListItem,_extends({linkComponent:linkComponent,key:i},item))}))};AUlinkList.propTypes={inline:_propTypes["default"].bool,items:_propTypes["default"].arrayOf(_propTypes["default"].shape({link:_propTypes["default"].string,text:_propTypes["default"].node.isRequired,li:_propTypes["default"].object})).isRequired,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUlinkList.defaultProps={linkComponent:"a"};var _default=AUlinkList;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,