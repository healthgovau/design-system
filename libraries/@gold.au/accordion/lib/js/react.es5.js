"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));var _animate=_interopRequireDefault(require("@gold.au/animate"));require("../css/styles.css");var _excluded=["header","closed","speed","onOpen","afterOpen","onClose","afterClose","dark","className","children"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj}}return _typeof(obj)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function")}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o};return _setPrototypeOf(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else{result=Super.apply(this,arguments)}return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call}return _assertThisInitialized(self)}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return self}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true}catch(e){return false}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)};return _getPrototypeOf(o)}var IDstart=0;var AUaccordion=/*#__PURE__*/function(_React$PureComponent){_inherits(AUaccordion,_React$PureComponent);var _super=_createSuper(AUaccordion);/**
	 * Constructor
	 * Create state and iterate over a unique ID
	 *
	 * @param  {object}  props - The props object
	 */function AUaccordion(props){var _this;_classCallCheck(this,AUaccordion);_this=_super.call(this,props);var header=props.header,closed=props.closed,speed=props.speed,onOpen=props.onOpen,afterOpen=props.afterOpen,onClose=props.onClose,afterClose=props.afterClose,dark=props.dark,_props$className=props.className,className=_props$className===void 0?"":_props$className,children=props.children,attributeOptions=_objectWithoutProperties(props,_excluded);_this.setAriaRoles=_this.setAriaRoles.bind(_assertThisInitialized(_this));_this.toggleClasses=_this.toggleClasses.bind(_assertThisInitialized(_this));_this.removeClass=_this.removeClass.bind(_assertThisInitialized(_this));_this.addClass=_this.addClass.bind(_assertThisInitialized(_this));_this.accordionToggle=_this.accordionToggle.bind(_assertThisInitialized(_this));_this.accordionOpen=_this.accordionOpen.bind(_assertThisInitialized(_this));_this.accordionClose=_this.accordionClose.bind(_assertThisInitialized(_this));_this.toggle=_this.toggle.bind(_assertThisInitialized(_this));_this.className=className;_this.attributeOptions=attributeOptions;// Generate a unique ID and our css class
IDstart++;_this.ID="accordion".concat(IDstart);_this.closeClass=_this.props.closed?"au-accordion--closed":"";return _this}/**
	 * Handle state if supplied
	 */_createClass(AUaccordion,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){if(this.props.closed!==prevProps.closed){if(this.props.closed){this.accordionClose(this.accordionHeader)}else{this.accordionOpen(this.accordionHeader)}}}/**
	 * Set the correct Aria roles for given element on the accordion title and body
	 *
	 * @param  {object} element  - The DOM element we want to set attributes for
	 * @param  {object} target   - The DOM element we want to set attributes for
	 * @param  {string} state    - The DOM element we want to set attributes for
	 */},{key:"setAriaRoles",value:function setAriaRoles(element,target,state){if(state==="closing"){element.setAttribute("aria-expanded",false)}else{element.setAttribute("aria-expanded",true)}}/**
	 * IE8 compatible function for replacing classes on a DOM node
	 *
	 * @param  {object} element       - The DOM element we want to toggle classes on
	 * @param  {object} target        - The DOM element we want to toggle classes on
	 * @param  {object} state         - The current state of the animation on the element
	 * @param  {string} openingClass  - The firstClass you want to toggle on the DOM node
	 * @param  {string} closingClass  - The secondClass you want to toggle on the DOM node
	 */},{key:"toggleClasses",value:function toggleClasses(element,state,openingClass,closingClass){if(state==="opening"||state==="open"){var oldClass=openingClass||"au-accordion--closed";var newClass=closingClass||"au-accordion--open"}else{var oldClass=closingClass||"au-accordion--open";var newClass=openingClass||"au-accordion--closed"}this.removeClass(element,oldClass);this.addClass(element,newClass)}/**
	 * IE8 compatible function for removing a class
	 *
	 * @param  {object} element   - The DOM element we want to manipulate
	 * @param  {object} className - The name of the class to be removed
	 */},{key:"removeClass",value:function removeClass(element,className){if(element.classList){element.classList.remove(className)}else{element.className=element.className.replace(new RegExp("(^|\\b)"+className.split(" ").join("|")+"(\\b|$)","gi")," ")}}/**
	 * IE8 compatible function for adding a class
	 *
	 * @param  {object} element   - The DOM element we want to manipulate
	 * @param  {object} className - The name of the class to be added
	 */},{key:"addClass",value:function addClass(element,className){if(element.classList){element.classList.add(className)}else{element.className=element.className+" "+className}}/**
	 * Toggle an accordion element
	 *
	 * @param  {string}  elements  - The DOM node/s to toggle
	 * @param  {integer} speed     - The speed in ms for the animation
	 * @param  {object}  callbacks - An object of four optional callbacks: { onOpen, afterOpen, onClose, afterClose }
	 *
	 */},{key:"accordionToggle",value:function accordionToggle(elements,speed,callbacks){var SetAriaRoles=this.setAriaRoles;var ToggleClasses=this.toggleClasses;// stop event propagation
try{window.event.cancelBubble=true;event.stopPropagation()}catch(error){}// making sure we can iterate over just one DOM element
if(elements.length===undefined){elements=[elements]}// check this once
if(_typeof(callbacks)!="object"){callbacks={}}for(var i=0;i<elements.length;i++){var element=elements[i];var targetId=element.getAttribute("aria-controls");var target=document.getElementById(targetId);if(target==null){throw new Error("AU.animate.Toggle cannot find the target to be toggled from inside aria-controls")}target.style.display="block";(function(element){_animate["default"].animate.Toggle({element:target,property:"height",speed:speed||250,prefunction:function prefunction(target,state){if(state==="opening"){target.style.display="block";// run when opening
if(typeof callbacks.onOpen==="function"){callbacks.onOpen()}}else{// run when closing
if(typeof callbacks.onClose==="function"){callbacks.onClose()}}SetAriaRoles(element,target,state);ToggleClasses(element,state)},postfunction:function postfunction(target,state){if(state==="closed"){target.style.display="";target.style.height="";// run after opening
if(typeof callbacks.afterOpen==="function"){callbacks.afterClose()}}else{// run after closing
if(typeof callbacks.afterClose==="function"){callbacks.afterOpen()}}ToggleClasses(target,state)}})})(element)}return false}/**
	 * Open a group of accordion elements
	 *
	 * @param  {string}  elements  - The DOM node/s to toggle
	 * @param  {integer} speed     - The speed in ms for the animation
	 *
	 */},{key:"accordionOpen",value:function accordionOpen(elements,speed){var ToggleClasses=this.toggleClasses;// stop event propagation
try{window.event.cancelBubble=true;event.stopPropagation()}catch(error){}if(elements.length===undefined){elements=[elements]}for(var i=0;i<elements.length;i++){var element=elements[i];var targetId=element.getAttribute("aria-controls");var target=document.getElementById(targetId);// let’s find out if this accordion is still closed
var height=0;if(typeof getComputedStyle!=="undefined"){height=window.getComputedStyle(target).height}else{height=target.currentStyle.height}if(parseInt(height)===0){target.style.height="0px"}target.style.display="";this.toggleClasses(target,"opening");this.toggleClasses(element,"opening");this.setAriaRoles(element,target,"opening");(function(target,speed,element){_animate["default"].animate.Run({element:target,property:"height",endSize:"auto",speed:speed||250,callback:function callback(){ToggleClasses(element,"opening")}})})(target,speed,element)}}/**
	 * Close a group of accordion elements
	 *
	 * @param  {string}  elements  - The DOM node/s to toggle
	 * @param  {integer} speed     - The speed in ms for the animation
	 *
	 */},{key:"accordionClose",value:function accordionClose(elements,speed){var ToggleClasses=this.toggleClasses;// stop event propagation
try{window.event.cancelBubble=true;event.stopPropagation()}catch(error){}if(elements.length===undefined){elements=[elements]}for(var i=0;i<elements.length;i++){var element=elements[i];var targetId=element.getAttribute("aria-controls");var target=document.getElementById(targetId);this.toggleClasses(element,"closing");this.setAriaRoles(element,target,"closing");(function(target,speed){_animate["default"].animate.Run({element:target,property:"height",endSize:0,speed:speed||250,callback:function callback(){target.style.display="";target.style.height="";ToggleClasses(target,"close")}})})(target,speed)}}/**
	 * Toggle an accordion on click
	 *
	 * @param  {event object} event - The event object of the click
	 */},{key:"toggle",value:function toggle(event){event.preventDefault();this.accordionToggle(this.accordionHeader,this.props.speed,{onOpen:this.props.onOpen,afterOpen:this.props.afterOpen,onClose:this.props.onClose,afterClose:this.props.afterClose})}},{key:"render",value:function render(){var _this2=this;return/*#__PURE__*/_react["default"].createElement("section",_extends({className:"au-accordion ".concat(this.className).concat(this.props.dark?" au-accordion--dark":"")},this.attributeOptions),/*#__PURE__*/_react["default"].createElement("button",{className:"au-accordion__title js-au-accordion ".concat(this.closeClass),"aria-controls":this.ID,"aria-expanded":!this.props.closed,ref:function ref(accordionHeader){_this2.accordionHeader=accordionHeader},onClick:function onClick(event){return _this2.toggle(event)}},this.props.header),/*#__PURE__*/_react["default"].createElement("div",{className:"au-accordion__body ".concat(this.closeClass),id:this.ID},/*#__PURE__*/_react["default"].createElement("div",{className:"au-accordion__body-wrapper"},this.props.children)))}}]);return AUaccordion}(_react["default"].PureComponent);;AUaccordion.propTypes={children:_propTypes["default"].node.isRequired,header:_propTypes["default"].string.isRequired,closed:_propTypes["default"].bool,speed:_propTypes["default"].number,dark:_propTypes["default"].bool,onOpen:_propTypes["default"].func,afterOpen:_propTypes["default"].func,onClose:_propTypes["default"].func,afterClose:_propTypes["default"].func,className:_propTypes["default"].string};AUaccordion.defaultProps={closed:false};var _default=AUaccordion;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,