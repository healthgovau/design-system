"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports["default"]=exports.AUtag=void 0;var _react=_interopRequireDefault(require("react"));var _propTypes=_interopRequireDefault(require("prop-types"));var _excluded=["link","dark","text","linkComponent","className"],_excluded2=["dark","tags","className"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}/**
 * TODO
 * @param  {string}  link             - The link for this tag, optional
 * @param  {string}  text             - The text for the tag
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUtag=function AUtag(_ref){var link=_ref.link,dark=_ref.dark,text=_ref.text,linkComponent=_ref.linkComponent,className=_ref.className,attributeOptions=_objectWithoutProperties(_ref,_excluded);var TagContainer="span";var LinkComponent=linkComponent;if(LinkComponent==="a"){attributeOptions.href=link}// If we are using a link component
else if(typeof LinkComponent==="function"){attributeOptions.to=link}return link?/*#__PURE__*/_react["default"].createElement(LinkComponent,_extends({className:"au-tag ".concat(dark?"au-tag--dark":""," ").concat(className)},attributeOptions),text):/*#__PURE__*/_react["default"].createElement(TagContainer,_extends({},attributeOptions,{className:"au-tag ".concat(dark?"au-tag--dark":""," ").concat(className)}),text)};exports.AUtag=AUtag;AUtag.propTypes={link:_propTypes["default"].string,text:_propTypes["default"].string.isRequired,li:_propTypes["default"].object,linkComponent:_propTypes["default"].oneOfType([_propTypes["default"].string,_propTypes["default"].func])};AUtag.defaultProps={linkComponent:"a",className:""};/**
 * DEFAULT
 * The tags component
 *
 * @param  {boolean} dark             - Add the dark variation class, optional
 * @param  {array}   tags             - The tags, format: { link: '', text: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  li               - An additional object to be spread into the list item
 * @param  {object}  attributeOptions - Any other attribute options
 */var AUtagList=function AUtagList(_ref2){var dark=_ref2.dark,tags=_ref2.tags,_ref2$className=_ref2.className,className=_ref2$className===void 0?"":_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,_excluded2);return/*#__PURE__*/_react["default"].createElement("ul",_extends({className:"au-tag-list ".concat(className)},attributeOptions),tags.map(function(tag,i){return/*#__PURE__*/_react["default"].createElement("li",_extends({key:i},tag.li),/*#__PURE__*/_react["default"].createElement(AUtag,_extends({dark:dark,linkComponent:tag.linkComponent,link:tag.link,text:tag.text},tag.attributeOptions)))}))};AUtagList.propTypes={dark:_propTypes["default"].bool,tags:_propTypes["default"].arrayOf(_propTypes["default"].shape({link:_propTypes["default"].string,text:_propTypes["default"].string.isRequired,li:_propTypes["default"].object})).isRequired,className:_propTypes["default"].string};AUtagList.defaultProps={dark:false};var _default=AUtagList;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVXRhZyIsImxpbmsiLCJkYXJrIiwidGV4dCIsImxpbmtDb21wb25lbnQiLCJjbGFzc05hbWUiLCJhdHRyaWJ1dGVPcHRpb25zIiwiVGFnQ29udGFpbmVyIiwiTGlua0NvbXBvbmVudCIsImhyZWYiLCJ0byIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJsaSIsIm9iamVjdCIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiLCJBVXRhZ0xpc3QiLCJ0YWdzIiwibWFwIiwidGFnIiwiaSIsImJvb2wiLCJhcnJheU9mIiwic2hhcGUiXSwibWFwcGluZ3MiOiI4R0FTQSxvREFDQSw2RCxvcENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNQSxDQUFBQSxLQUFLLENBQUcsUUFBUkEsQ0FBQUEsS0FBUSxNQUF5RSxJQUF0RUMsQ0FBQUEsSUFBc0UsTUFBdEVBLElBQXNFLENBQWhFQyxJQUFnRSxNQUFoRUEsSUFBZ0UsQ0FBMURDLElBQTBELE1BQTFEQSxJQUEwRCxDQUFwREMsYUFBb0QsTUFBcERBLGFBQW9ELENBQXJDQyxTQUFxQyxNQUFyQ0EsU0FBcUMsQ0FBdkJDLGdCQUF1QiwwQ0FFN0YsR0FBSUMsQ0FBQUEsWUFBWSxDQUFHLE1BQW5CLENBQ0EsR0FBSUMsQ0FBQUEsYUFBYSxDQUFHSixhQUFwQixDQUdBLEdBQUlJLGFBQWEsR0FBSyxHQUF0QixDQUE0QixDQUMzQkYsZ0JBQWdCLENBQUNHLElBQWpCLENBQXdCUixJQUN4QixDQUNEO0FBSEEsSUFJSyxJQUFJLE1BQU9PLENBQUFBLGFBQVAsR0FBeUIsVUFBN0IsQ0FBMEMsQ0FDOUNGLGdCQUFnQixDQUFDSSxFQUFqQixDQUFzQlQsSUFDdEIsQ0FFRCxNQUNDQSxDQUFBQSxJQUFJLGNBQ0gsZ0NBQUMsYUFBRCxXQUFlLFNBQVMsa0JBQWFDLElBQUksQ0FBRyxjQUFILENBQW9CLEVBQXJDLGFBQTJDRyxTQUEzQyxDQUF4QixFQUFxRkMsZ0JBQXJGLEVBQTBHSCxJQUExRyxDQURHLGNBR0gsZ0NBQUMsWUFBRCxhQUFrQkcsZ0JBQWxCLEVBQW9DLFNBQVMsa0JBQWFKLElBQUksQ0FBRyxjQUFILENBQW9CLEVBQXJDLGFBQTJDRyxTQUEzQyxDQUE3QyxHQUNFRixJQURGLENBSUYsQ0F0Qk0sQyxvQkF5QlBILEtBQUssQ0FBQ1csU0FBTixDQUFrQixDQUNqQlYsSUFBSSxDQUFFVyxzQkFBVUMsTUFEQyxDQUVqQlYsSUFBSSxDQUFFUyxzQkFBVUMsTUFBVixDQUFpQkMsVUFGTixDQUdqQkMsRUFBRSxDQUFFSCxzQkFBVUksTUFIRyxDQUlqQlosYUFBYSxDQUFFUSxzQkFBVUssU0FBVixDQUFvQixDQUFFTCxzQkFBVUMsTUFBWixDQUFvQkQsc0JBQVVNLElBQTlCLENBQXBCLENBSkUsQ0FBbEIsQ0FPQWxCLEtBQUssQ0FBQ21CLFlBQU4sQ0FBcUIsQ0FDcEJmLGFBQWEsQ0FBRSxHQURLLENBRXBCQyxTQUFTLENBQUUsRUFGUyxDQUFyQixDQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsR0FBTWUsQ0FBQUEsU0FBUyxDQUFHLFFBQVpBLENBQUFBLFNBQVksV0FBR2xCLENBQUFBLElBQUgsT0FBR0EsSUFBSCxDQUFTbUIsSUFBVCxPQUFTQSxJQUFULHVCQUFlaEIsU0FBZixDQUFlQSxTQUFmLDBCQUEyQixFQUEzQixpQkFBa0NDLGdCQUFsQywrREFDakIsK0NBQUksU0FBUyx1QkFBbUJELFNBQW5CLENBQWIsRUFBb0RDLGdCQUFwRCxFQUVFZSxJQUFJLENBQUNDLEdBQUwsQ0FDQyxTQUFFQyxHQUFGLENBQU9DLENBQVAscUJBQ0MsK0NBQUksR0FBRyxDQUFFQSxDQUFULEVBQWdCRCxHQUFHLENBQUNSLEVBQXBCLGVBQ0MsZ0NBQUMsS0FBRCxXQUNDLElBQUksQ0FBRWIsSUFEUCxDQUVDLGFBQWEsQ0FBR3FCLEdBQUcsQ0FBQ25CLGFBRnJCLENBR0MsSUFBSSxDQUFFbUIsR0FBRyxDQUFDdEIsSUFIWCxDQUlDLElBQUksQ0FBRXNCLEdBQUcsQ0FBQ3BCLElBSlgsRUFLS29CLEdBQUcsQ0FBQ2pCLGdCQUxULEVBREQsQ0FERCxDQURELENBRkYsQ0FEaUIsQ0FBbEIsQ0FvQkFjLFNBQVMsQ0FBQ1QsU0FBVixDQUFzQixDQUNyQlQsSUFBSSxDQUFFVSxzQkFBVWEsSUFESyxDQUVyQkosSUFBSSxDQUFFVCxzQkFBVWMsT0FBVixDQUNMZCxzQkFBVWUsS0FBVixDQUFnQixDQUNmMUIsSUFBSSxDQUFFVyxzQkFBVUMsTUFERCxDQUVmVixJQUFJLENBQUVTLHNCQUFVQyxNQUFWLENBQWlCQyxVQUZSLENBR2ZDLEVBQUUsQ0FBRUgsc0JBQVVJLE1BSEMsQ0FBaEIsQ0FESyxFQU1KRixVQVJtQixDQVNyQlQsU0FBUyxDQUFFTyxzQkFBVUMsTUFUQSxDQUF0QixDQVlBTyxTQUFTLENBQUNELFlBQVYsQ0FBeUIsQ0FDeEJqQixJQUFJLENBQUUsS0FEa0IsQ0FBekIsQyxhQUlla0IsUyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBAZ29sZC5hdS90YWdzIHY1LjAuMCAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcbiAqIHRhZ3MgZnVuY3Rpb25cbiAqXG4gKiBVc2UgdGFncyB0byBhcHBseSBhIHRheG9ub215IGFuZCBsaW5rIHRvIHNpbWlsYXIgY29udGVudC5cbiAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vKipcbiAqIFRPRE9cbiAqIEBwYXJhbSAge3N0cmluZ30gIGxpbmsgICAgICAgICAgICAgLSBUaGUgbGluayBmb3IgdGhpcyB0YWcsIG9wdGlvbmFsXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICB0ZXh0ICAgICAgICAgICAgIC0gVGhlIHRleHQgZm9yIHRoZSB0YWdcbiAqIEBwYXJhbSAge2Jvb2xlYW59IGRhcmsgICAgICAgICAgICAgLSBBZGQgdGhlIGRhcmsgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7b2JqZWN0fSAgYXR0cmlidXRlT3B0aW9ucyAtIEFueSBvdGhlciBhdHRyaWJ1dGUgb3B0aW9uc1xuICovXG5leHBvcnQgY29uc3QgQVV0YWcgPSAoeyBsaW5rLCBkYXJrLCB0ZXh0LCBsaW5rQ29tcG9uZW50LCBjbGFzc05hbWUsIC4uLmF0dHJpYnV0ZU9wdGlvbnMgfSkgPT4ge1xuXG5cdGxldCBUYWdDb250YWluZXIgPSAnc3Bhbic7XG5cdGxldCBMaW5rQ29tcG9uZW50ID0gbGlua0NvbXBvbmVudDtcblxuXG5cdGlmKCBMaW5rQ29tcG9uZW50ID09PSAnYScgKSB7XG5cdFx0YXR0cmlidXRlT3B0aW9ucy5ocmVmID0gbGluaztcblx0fVxuXHQvLyBJZiB3ZSBhcmUgdXNpbmcgYSBsaW5rIGNvbXBvbmVudFxuXHRlbHNlIGlmKCB0eXBlb2YgTGlua0NvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyApIHtcblx0XHRhdHRyaWJ1dGVPcHRpb25zLnRvID0gbGluaztcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0bGluayA/XG5cdFx0XHQ8TGlua0NvbXBvbmVudCBjbGFzc05hbWU9e2BhdS10YWcgJHsgZGFyayA/ICdhdS10YWctLWRhcmsnIDogJyd9ICR7Y2xhc3NOYW1lfWB9IHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9PnsgdGV4dCB9PC9MaW5rQ29tcG9uZW50PlxuXHRcdFx0OlxuXHRcdFx0PFRhZ0NvbnRhaW5lciB7Li4uYXR0cmlidXRlT3B0aW9uc30gY2xhc3NOYW1lPXtgYXUtdGFnICR7IGRhcmsgPyAnYXUtdGFnLS1kYXJrJyA6ICcnfSAke2NsYXNzTmFtZX1gfT5cblx0XHRcdFx0e3RleHR9XG5cdFx0XHQ8L1RhZ0NvbnRhaW5lcj5cblx0KVxufVxuXG5cbkFVdGFnLnByb3BUeXBlcyA9IHtcblx0bGluazogUHJvcFR5cGVzLnN0cmluZyxcblx0dGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRsaTogUHJvcFR5cGVzLm9iamVjdCxcblx0bGlua0NvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jIF0pLFxufTtcblxuQVV0YWcuZGVmYXVsdFByb3BzID0ge1xuXHRsaW5rQ29tcG9uZW50OiAnYScsXG5cdGNsYXNzTmFtZTogJydcbn07XG5cblxuXG4vKipcbiAqIERFRkFVTFRcbiAqIFRoZSB0YWdzIGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge2Jvb2xlYW59IGRhcmsgICAgICAgICAgICAgLSBBZGQgdGhlIGRhcmsgdmFyaWF0aW9uIGNsYXNzLCBvcHRpb25hbFxuICogQHBhcmFtICB7YXJyYXl9ICAgdGFncyAgICAgICAgICAgICAtIFRoZSB0YWdzLCBmb3JtYXQ6IHsgbGluazogJycsIHRleHQ6ICcnLCBvbkNsaWNrOiAoKSB9XG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBjbGFzc05hbWUgICAgICAgIC0gQW4gYWRkaXRpb25hbCBjbGFzcywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge29iamVjdH0gIGxpICAgICAgICAgICAgICAgLSBBbiBhZGRpdGlvbmFsIG9iamVjdCB0byBiZSBzcHJlYWQgaW50byB0aGUgbGlzdCBpdGVtXG4gKiBAcGFyYW0gIHtvYmplY3R9ICBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zXG4gKi9cbmNvbnN0IEFVdGFnTGlzdCA9ICh7IGRhcmssIHRhZ3MsIGNsYXNzTmFtZSA9ICcnLCAuLi5hdHRyaWJ1dGVPcHRpb25zIH0pID0+IChcblx0PHVsIGNsYXNzTmFtZT17IGBhdS10YWctbGlzdCAkeyBjbGFzc05hbWUgfWAgfSB7IC4uLmF0dHJpYnV0ZU9wdGlvbnMgfT5cblx0XHR7XG5cdFx0XHR0YWdzLm1hcChcblx0XHRcdFx0KCB0YWcsIGkgKSA9PiAoXG5cdFx0XHRcdFx0PGxpIGtleT17aX0gey4uLnRhZy5saX0+XG5cdFx0XHRcdFx0XHQ8QVV0YWdcblx0XHRcdFx0XHRcdFx0ZGFyaz17ZGFya31cblx0XHRcdFx0XHRcdFx0bGlua0NvbXBvbmVudD17IHRhZy5saW5rQ29tcG9uZW50IH1cblx0XHRcdFx0XHRcdFx0bGluaz17dGFnLmxpbmt9XG5cdFx0XHRcdFx0XHRcdHRleHQ9e3RhZy50ZXh0fVxuXHRcdFx0XHRcdFx0XHR7Li4udGFnLmF0dHJpYnV0ZU9wdGlvbnN9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdClcblx0XHRcdClcblx0XHR9XG5cdDwvdWw+XG4pO1xuXG5BVXRhZ0xpc3QucHJvcFR5cGVzID0ge1xuXHRkYXJrOiBQcm9wVHlwZXMuYm9vbCxcblx0dGFnczogUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGxpbms6IFByb3BUeXBlcy5zdHJpbmcsXG5cdFx0XHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdFx0XHRsaTogUHJvcFR5cGVzLm9iamVjdCxcblx0XHR9KVxuXHQpLmlzUmVxdWlyZWQsXG5cdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbkFVdGFnTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG5cdGRhcms6IGZhbHNlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBVXRhZ0xpc3Q7XG4iXX0=